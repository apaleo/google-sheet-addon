/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/reports/v0-nsfw/reports/gross-transactions": {
    /** Returns a list of gross transactions with metadata (folio and reservation details).<br>You must have this scope: 'reports.read'. */
    post: operations["ReportsReportsGross-transactionsPost"];
  };
  "/reports/v0-nsfw/reports/ordered-services": {
    /** Returns a list of ordered services per day with information about the guest and the reservation this service was ordered for.<br>You must have this scope: 'reports.read'. */
    get: operations["ReportsReportsOrdered-servicesGet"];
  };
  "/reports/v0-nsfw/reports/room-nights-consumed": {
    /**
     * Returns room nights for a property for a certain month. Only over-night rateplans are considered.
     * <br />
     * DEPRECATED: will be replaced by "/room-nights"<br>You must have this scope: 'reports.read'.
     */
    get: operations["ReportsReportsRoom-nights-consumedGet"];
  };
  "/reports/v0-nsfw/reports/room-nights": {
    /**
     * Returns room nights for a property for a certain month. Only over-night rateplans are considered.<br />
     * Includes statistical information on purpose of travel, and nationality.
     * The status considered are: in-house, confirmed, and checked out.<br>You must have this scope: 'reports.read'.
     */
    get: operations["ReportsReportsRoom-nightsGet"];
  };
  "/reports/v0-nsfw/reports/bed-nights": {
    /**
     * Returns bed nights for a property for a certain month. Only over-night rateplans are considered.<br />
     * Counts number of guests.
     * Includes statistical information on purpose of travel, and nationality. The data is taken from the primary guest only.
     * The status considered are: in-house, confirmed, and checked out.<br>You must have this scope: 'reports.read'.
     */
    get: operations["ReportsReportsBed-nightsGet"];
  };
  "/reports/v0-nsfw/reports/arrivals": {
    /**
     * Returns number of arriving guests for a property for a certain month. Only over-night rateplans are considered.<br />
     * Includes statistical information on purpose of travel, and nationality. The data is taken from the primary guest only.
     * The status considered are: in-house, confirmed, and checked out.<br>You must have this scope: 'reports.read'.
     */
    get: operations["ReportsReportsArrivalsGet"];
  };
  "/reports/v0-nsfw/reports/property-performance": {
    /**
     * The property performance API return you key performance indicator for the selected property like occupancy, ADR and RevPAR.
     * It only considers the originally booked amounts for sold units excluding any additional services or manually posted charges
     * or allowances. The results can be filterd to only show you data for a certain part of the business. For example you can exclude
     * day-use reservations or complimentary rate plans.<br>You must have this scope: 'reports.read'.
     */
    get: operations["ReportsReportsProperty-performanceGet"];
  };
  "/reports/v0-nsfw/reports/company-invoices-vat": {
    /** <br>You must have this scope: 'reports.read'. */
    get: operations["ReportsReportsCompany-invoices-vatGet"];
  };
  "/reports/v0-nsfw/reports/revenues": {
    /** <br>You must have this scope: 'reports.read'. */
    get: operations["ReportsReportsRevenuesGet"];
  };
}

export interface definitions {
  AddressModel: {
    addressLine1: string;
    addressLine2?: string;
    postalCode: string;
    city: string;
    regionCode?: string;
    countryCode: string;
  };
  CompaniesVatReportItemModel: {
    company: definitions["CompanyModel"];
    invoice: definitions["InvoiceModel"];
  };
  CompaniesVatReportListModel: {
    /** List of company invoices */
    companyInvoices: definitions["CompaniesVatReportItemModel"][];
    /** Total count of items */
    count: number;
  };
  CompanyModel: {
    /** The ID of the company */
    id: string;
    /** The code for the company */
    code: string;
    /** The name of the company */
    name: string;
    /** The tax ID of the company */
    taxId?: string;
    address: definitions["AddressModel"];
  };
  CountryEntry: {
    /** 2 letter ISO country code */
    countryCode: string;
    number: number;
    percent: number;
    reservationIds?: string[];
  };
  EmbeddedUnitGroupModel: {
    /** The unit group id */
    id: string;
    /** The code for the unit group that can be shown in reports and table views */
    code?: string;
    /** The name for the unit group */
    name?: string;
    /** The description for the unit group */
    description?: string;
    /** The unit group type */
    type?: "BedRoom" | "MeetingRoom" | "EventSpace" | "ParkingLot" | "Other";
  };
  ExportAccountModel: {
    /** The account name */
    name: string;
    /** The account number */
    number: string;
    /** The number of the parent account */
    parentNumber?: string;
    /** The account type */
    type:
      | "Revenues"
      | "Payments"
      | "Liabilities"
      | "Receivables"
      | "Vat"
      | "House"
      | "AccountsReceivable"
      | "CityTaxes"
      | "TransitoryItems"
      | "VatOnLiabilities"
      | "LossOfAccountsReceivable";
  };
  GuestReportModel: {
    /** Total number for all guests. */
    total: number;
    /** Breakdown by travel purpose. Data where the travel purpose is unknown is excluded. */
    travelPurposeBreakdown?: definitions["TravelPurposeEntry"][];
    /** Breakdown by nationality. Data where the nationality is unknown is excluded. */
    nationalityBreakdown?: definitions["CountryEntry"][];
    /** Breakdown by country of residence. Data where the country of residence is unknown is excluded. */
    countryOfResidenceBreakdown?: definitions["CountryEntry"][];
  };
  InvoiceModel: {
    /** Invoice number */
    number?: string;
    /** Date the invoice has been created */
    date: string;
    subTotal: definitions["MonetaryValueModel"];
    outstandingPayment?: definitions["MonetaryValueModel"];
    /** The subtotal, displaying net and tax amount for each VAT type */
    taxDetails?: definitions["TaxDetailModel"][];
  };
  MessageItemCollection: {
    messages?: string[];
  };
  MonetaryValueModel: {
    amount: number;
    currency: string;
  };
  OrderedServicesGuestModel: {
    /** Title of the guest */
    title?: "Mr" | "Ms" | "Dr" | "Prof" | "Mrs" | "Other";
    /** Gender of the guest */
    gender?: "Female" | "Male" | "Other";
    /** First name of the guest */
    firstName?: string;
    /** Middle initial of the guest */
    middleInitial?: string;
    /** Last name of the guest */
    lastName: string;
  };
  OrderedServicesItemModel: {
    /** The service id */
    id: string;
    /** The code for the service */
    code: string;
    /** The name for the service */
    name: string;
    /** The date this service is delivered */
    serviceDate: string;
    /** The count of services ordered */
    count: number;
    guest?: definitions["OrderedServicesGuestModel"];
    reservation: definitions["OrderedServicesReservationModel"];
    unit?: definitions["OrderedServicesUnitModel"];
    unitGroup: definitions["OrderedServicesUnitGroupModel"];
  };
  OrderedServicesListModel: {
    /** List of ordered services */
    orderedServices: definitions["OrderedServicesItemModel"][];
    /** Total count of items */
    count: number;
  };
  OrderedServicesReservationModel: {
    /** Reservation id */
    id: string;
    /** Date of arrival<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    arrival: string;
    /** Date of departure<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    departure: string;
    /** Number of persons */
    persons: number;
  };
  OrderedServicesUnitGroupModel: {
    /** The unit group id */
    id: string;
    /** The code for the unit group */
    code: string;
    /** The name for the unit group */
    name: string;
  };
  OrderedServicesUnitModel: {
    /** The unit id */
    id: string;
    /** The name for the unit */
    name: string;
  };
  PropertyPerformancePerUnitGroupModel: {
    unitGroup: definitions["EmbeddedUnitGroupModel"];
    /** The number of units physically existing excluding the ones which are out of inventory */
    houseCount: number;
    /** The number of items (e.g. beds, seats, etc.) physically existing excluding the ones which are out of inventory */
    houseItemsCount: number;
    /** The number of sold units plus definitely blocked units from group bookings */
    soldCount: number;
    /** The number of sold items (e.g. beds, seats, etc.) plus definitely blocked items from group bookings */
    soldItemsCount: number;
    /** The number of unsold units: house count minus sold units and out of order units */
    unsoldCount: number;
    /** The number of unsold items (e.g. beds, seats, etc.): house items count minus sold items and out of order items */
    unsoldItemsCount: number;
    /** The number of units which are out of order */
    outOfOrderCount: number;
    /** The number of items (e.g. beds, seats, etc.) which are out of order */
    outOfOrderItemsCount: number;
    /** The number of units which are tentatively blocked */
    tentativelyBlockedCount: number;
    /** The number of items (beds, seats, etc.) which are tentatively blocked */
    tentativelyBlockedItemsCount: number;
    /** The number of arrivals units */
    arrivalsCount: number;
    /** The number of departures units */
    departuresCount: number;
    /** The number of no-show units */
    noShowsCount: number;
    /** The number of cancelled units */
    cancellationsCount: number;
    /** The occupancy in percent, which is the ratio of sold units in relation to house count minus out of order units */
    occupancyPercentage: number;
    grossUnitRevenue: definitions["MonetaryValueModel"];
    netUnitRevenue: definitions["MonetaryValueModel"];
    grossAccommodationRevenue: definitions["MonetaryValueModel"];
    netAccommodationRevenue: definitions["MonetaryValueModel"];
    grossFoodAndBeveragesRevenue: definitions["MonetaryValueModel"];
    netFoodAndBeveragesRevenue: definitions["MonetaryValueModel"];
    grossOtherRevenue: definitions["MonetaryValueModel"];
    netOtherRevenue: definitions["MonetaryValueModel"];
    grossAdr: definitions["MonetaryValueModel"];
    netAdr: definitions["MonetaryValueModel"];
    revPar: definitions["MonetaryValueModel"];
  };
  PropertyPerformanceReportItemModel: {
    /** The business day */
    businessDay: string;
    /** The number of units physically existing excluding the ones which are out of inventory */
    houseCount: number;
    /** The number of items (e.g. beds, seats, etc.) physically existing excluding the ones which are out of inventory */
    houseItemsCount: number;
    /** The number of sold units plus definitely blocked units from group bookings */
    soldCount: number;
    /** The number of sold items (e.g. beds, seats, etc.) plus definitely blocked items from group bookings */
    soldItemsCount: number;
    /** The number of unsold units: house count minus sold units and out of order units */
    unsoldCount: number;
    /** The number of unsold items (e.g. beds, seats, etc.): house items count minus sold items and out of order items */
    unsoldItemsCount: number;
    /** The number of units which are out of order */
    outOfOrderCount: number;
    /** The number of items (e.g. beds, seats, etc.) which are out of order */
    outOfOrderItemsCount: number;
    /** The number of units which are tentatively blocked */
    tentativelyBlockedCount: number;
    /** The number of items (beds, seats, etc.) which are tentatively blocked */
    tentativelyBlockedItemsCount: number;
    /** The number of arrivals units */
    arrivalsCount: number;
    /** The number of departures units */
    departuresCount: number;
    /** The number of no-show units */
    noShowsCount: number;
    /** The number of cancelled units */
    cancellationsCount: number;
    /** The occupancy in percent, which is the ratio of sold units in relation to house count minus out of order units */
    occupancyPercentage: number;
    grossUnitRevenue: definitions["MonetaryValueModel"];
    netUnitRevenue: definitions["MonetaryValueModel"];
    grossAccommodationRevenue: definitions["MonetaryValueModel"];
    netAccommodationRevenue: definitions["MonetaryValueModel"];
    grossFoodAndBeveragesRevenue: definitions["MonetaryValueModel"];
    netFoodAndBeveragesRevenue: definitions["MonetaryValueModel"];
    grossOtherRevenue: definitions["MonetaryValueModel"];
    netOtherRevenue: definitions["MonetaryValueModel"];
    grossAdr: definitions["MonetaryValueModel"];
    netAdr: definitions["MonetaryValueModel"];
    revPar: definitions["MonetaryValueModel"];
    /** The breakdown per unit group */
    unitGroups: definitions["PropertyPerformancePerUnitGroupModel"][];
  };
  PropertyPerformanceReportModel: {
    /** The number of units physically existing excluding the ones which are out of inventory */
    houseCount: number;
    /** The number of items (e.g. beds, seats, etc.) physically existing excluding the ones which are out of inventory */
    houseItemsCount: number;
    /** The number of sold units plus definitely blocked units from group bookings */
    soldCount: number;
    /** The number of sold items (e.g. beds, seats, etc.) plus definitely blocked items from group bookings */
    soldItemsCount: number;
    /** The number of unsold units: house count minus sold units and out of order units */
    unsoldCount: number;
    /** The number of unsold items (e.g. beds, seats, etc.): house items count minus sold items and out of order items */
    unsoldItemsCount: number;
    /** The number of units which are out of order */
    outOfOrderCount: number;
    /** The number of items (e.g. beds, seats, etc.) which are out of order */
    outOfOrderItemsCount: number;
    /** The number of units which are tentatively blocked */
    tentativelyBlockedCount: number;
    /** The number of items (beds, seats, etc.) which are tentatively blocked */
    tentativelyBlockedItemsCount: number;
    /** The number of arrivals units */
    arrivalsCount: number;
    /** The number of departures units */
    departuresCount: number;
    /** The number of no-show units */
    noShowsCount: number;
    /** The number of cancelled units */
    cancellationsCount: number;
    /** The occupancy in percent, which is the ratio of sold units in relation to house count minus out of order units */
    occupancyPercentage: number;
    grossUnitRevenue: definitions["MonetaryValueModel"];
    netUnitRevenue: definitions["MonetaryValueModel"];
    grossAccommodationRevenue: definitions["MonetaryValueModel"];
    netAccommodationRevenue: definitions["MonetaryValueModel"];
    grossFoodAndBeveragesRevenue: definitions["MonetaryValueModel"];
    netFoodAndBeveragesRevenue: definitions["MonetaryValueModel"];
    grossOtherRevenue: definitions["MonetaryValueModel"];
    netOtherRevenue: definitions["MonetaryValueModel"];
    grossAdr: definitions["MonetaryValueModel"];
    netAdr: definitions["MonetaryValueModel"];
    revPar: definitions["MonetaryValueModel"];
    /** The breakdown by business day for the specified filter criteria */
    businessDays?: definitions["PropertyPerformanceReportItemModel"][];
  };
  ReceiptModel: {
    /** The type of receipt. */
    type?: "Custom" | "Reservation" | "Invoice" | "PspReference";
    /** The receipt number. */
    number: string;
  };
  RevenuesReportItemModel: {
    account: definitions["ExportAccountModel"];
    netAmount: definitions["MonetaryValueModel"];
    grossAmount: definitions["MonetaryValueModel"];
    /** Child accounts of this account */
    children?: definitions["RevenuesReportItemModel"][];
  };
  RoomNightsConsumedModel: {
    /** Room nights consumed. */
    roomNightsConsumed: number;
  };
  TaxAmountModel: {
    /** The VAT type */
    type:
      | "Null"
      | "VeryReduced"
      | "Reduced"
      | "Normal"
      | "Without"
      | "Special"
      | "ReducedCovid19"
      | "NormalCovid19";
    /** The currently valid percent to calculate the VAT */
    percent: number;
    /** The tax amount */
    amount: number;
  };
  TaxDetailModel: {
    vatType:
      | "Null"
      | "VeryReduced"
      | "Reduced"
      | "Normal"
      | "Without"
      | "Special"
      | "ReducedCovid19"
      | "NormalCovid19";
    vatPercent: number;
    net: definitions["MonetaryValueModel"];
    tax: definitions["MonetaryValueModel"];
  };
  TransactionsGrossExportListItemModel: {
    reservation?: definitions["TransactionsGrossExportReservationModel"];
    /** Timestamp with time zone information, when the booking was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    timestamp: string;
    /** The business date when the booking was done */
    date: string;
    debitedAccount: definitions["ExportAccountModel"];
    creditedAccount: definitions["ExportAccountModel"];
    /** The type of business transaction which triggered the booking */
    command:
      | "PostCharge"
      | "PostPayment"
      | "MoveLineItem"
      | "PostPrepayment"
      | "PostToAccountsReceivables"
      | "PostPrepaymentVat"
      | "PostToLossOfAccountsReceivables"
      | "System";
    /** The currency of the transaction */
    currency: string;
    /** The gross amount being booked */
    grossAmount: number;
    /** The net amount being booked */
    netAmount: number;
    /** The taxes which make up the difference between net and gross amount */
    taxes?: definitions["TaxAmountModel"][];
    receipt: definitions["ReceiptModel"];
    /** The original raw transaction entry number which got converted to these one or 2 lines. */
    sourceEntryNumber: string;
    /** The reference for the transactions, reservation id for guest folios, folio id for external folios, property code for the house folio */
    reference: string;
    /** Does this transaction belong to a reservation, a house or an external folio */
    referenceType: "House" | "Guest" | "External";
  };
  TransactionsGrossExportListModel: {
    /** The list of gross transactions with additional metadata */
    transactions: definitions["TransactionsGrossExportListItemModel"][];
    /** Total count of items */
    count: number;
  };
  TransactionsGrossExportReservationModel: {
    /** Reservation id */
    id: string;
    /** Status of the reservation */
    status: "Confirmed" | "InHouse" | "CheckedOut" | "Canceled" | "NoShow";
    /** Date of arrival<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    arrival: string;
    /** Date of departure<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
    departure: string;
  };
  TravelPurposeEntry: {
    purpose: "Business" | "Leisure";
    number: number;
    percent: number;
    reservationIds?: string[];
  };
}

export interface operations {
  /** Returns a list of gross transactions with metadata (folio and reservation details).<br>You must have this scope: 'reports.read'. */
  "ReportsReportsGross-transactionsPost": {
    parameters: {
      query: {
        /** Specifies the property transactions will be filtered by. */
        propertyId: string;
        /** Filter by business date<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7 */
        dateFilter: string[];
        /** Filter transactions by reference (reservation id/external folio id/property id for house folio). */
        reference?: string;
      };
      header: {
        /**
         * Unique key for safely retrying requests without accidentally performing the same operation twice.
         * We'll always send back the same response for requests made with the same key,
         * and keys can't be reused with different request parameters. Keys expire after 24 hours.
         */
        "Idempotency-Key"?: string;
      };
    };
    responses: {
      200: {
        schema: definitions["TransactionsGrossExportListModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns a list of ordered services per day with information about the guest and the reservation this service was ordered for.<br>You must have this scope: 'reports.read'. */
  "ReportsReportsOrdered-servicesGet": {
    parameters: {
      query: {
        /** Property Id */
        propertyId: string;
        /** Service ids the report should be generated for */
        serviceIds: string[];
        /** The inclusive start date of the interval. */
        from: string;
        /** The exclusive end date of the interval. */
        to: string;
      };
    };
    responses: {
      200: {
        schema: definitions["OrderedServicesListModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Returns room nights for a property for a certain month. Only over-night rateplans are considered.
   * <br />
   * DEPRECATED: will be replaced by "/room-nights"<br>You must have this scope: 'reports.read'.
   */
  "ReportsReportsRoom-nights-consumedGet": {
    parameters: {
      query: {
        /** Requested property. */
        propertyId: string;
        /** Requested month for the report. */
        month: number;
        /** Requested year for the report. */
        year: number;
      };
    };
    responses: {
      200: {
        schema: definitions["RoomNightsConsumedModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Returns room nights for a property for a certain month. Only over-night rateplans are considered.<br />
   * Includes statistical information on purpose of travel, and nationality.
   * The status considered are: in-house, confirmed, and checked out.<br>You must have this scope: 'reports.read'.
   */
  "ReportsReportsRoom-nightsGet": {
    parameters: {
      query: {
        /** Requested property. */
        propertyId: string;
        /** Requested month for the report. */
        month: number;
        /** Requested year for the report. */
        year: number;
      };
    };
    responses: {
      200: {
        schema: definitions["GuestReportModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Returns bed nights for a property for a certain month. Only over-night rateplans are considered.<br />
   * Counts number of guests.
   * Includes statistical information on purpose of travel, and nationality. The data is taken from the primary guest only.
   * The status considered are: in-house, confirmed, and checked out.<br>You must have this scope: 'reports.read'.
   */
  "ReportsReportsBed-nightsGet": {
    parameters: {
      query: {
        /** Requested property. */
        propertyId: string;
        /** Requested month for the report. */
        month: number;
        /** Requested year for the report. */
        year: number;
      };
    };
    responses: {
      200: {
        schema: definitions["GuestReportModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Returns number of arriving guests for a property for a certain month. Only over-night rateplans are considered.<br />
   * Includes statistical information on purpose of travel, and nationality. The data is taken from the primary guest only.
   * The status considered are: in-house, confirmed, and checked out.<br>You must have this scope: 'reports.read'.
   */
  ReportsReportsArrivalsGet: {
    parameters: {
      query: {
        /** Requested property. */
        propertyId: string;
        /** Requested month for the report. */
        month: number;
        /** Requested year for the report. */
        year: number;
      };
    };
    responses: {
      200: {
        schema: definitions["GuestReportModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * The property performance API return you key performance indicator for the selected property like occupancy, ADR and RevPAR.
   * It only considers the originally booked amounts for sold units excluding any additional services or manually posted charges
   * or allowances. The results can be filterd to only show you data for a certain part of the business. For example you can exclude
   * day-use reservations or complimentary rate plans.<br>You must have this scope: 'reports.read'.
   */
  "ReportsReportsProperty-performanceGet": {
    parameters: {
      query: {
        /** The ID of the property */
        propertyId: string;
        /** The inclusive start date of the interval */
        from: string;
        /** The inclusive end date of the interval */
        to: string;
        /** The company IDs used to filter the retrieved data */
        companyIds?: string[];
        /** The rate plan IDs used to filter the retrieved data */
        ratePlanIds?: string[];
        /** The unit group types used to filter the retrieved data */
        unitGroupTypes?: (
          | "BedRoom"
          | "MeetingRoom"
          | "EventSpace"
          | "ParkingLot"
          | "Other"
        )[];
        /** The unit group IDs used to filter the retrieved data */
        unitGroupIds?: string[];
        /** The time slice definition IDs used to filter the retrieved data */
        timeSliceDefinitionIds?: string[];
        /** The channel codes used to filter the retrieved data */
        channelCodes?: (
          | "Direct"
          | "BookingCom"
          | "Ibe"
          | "ChannelManager"
          | "Expedia"
          | "Homelike"
          | "Hrs"
          | "AltoVita"
        )[];
        /** The market segment IDs used to filter the retrieved data */
        marketSegmentIds?: string[];
        /** The travel purpose to filter the retrieved data */
        travelPurpose?: "Business" | "Leisure";
        /** List of all embedded resources that should be expanded in the response. Possible values are: businessDays. All other values will be silently ignored. */
        expand?: "businessDays"[];
      };
    };
    responses: {
      200: {
        schema: definitions["PropertyPerformanceReportModel"];
      };
      /** No Content */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** <br>You must have this scope: 'reports.read'. */
  "ReportsReportsCompany-invoices-vatGet": {
    parameters: {
      query: {
        /** Property ID */
        propertyId: string;
        /** Company IDs the report should be generated for */
        companyIds?: string[];
        /** Set a date interval to get the report for. Cannot be more than 1 month.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7 */
        dateFilter?: string[];
      };
    };
    responses: {
      200: {
        schema: definitions["CompaniesVatReportListModel"];
      };
      /** No Content */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** <br>You must have this scope: 'reports.read'. */
  ReportsReportsRevenuesGet: {
    parameters: {
      query: {
        /** Property ID */
        propertyId: string;
        /** The inclusive start date of the interval. */
        from: string;
        /** The exclusive end date of the interval. The interval is limited to one year. */
        to: string;
        /** The language for the the report */
        languageCode?: string;
      };
    };
    responses: {
      200: {
        schema: definitions["RevenuesReportItemModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
}

export interface external {}
