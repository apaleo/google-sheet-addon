/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/account/invitations": {
    /** Returns a list of all invitations to the current account.<br>You must have at least one of these scopes: 'identity:account-users.manage, identity:account-users.read'. */
    get: operations["ApiAccountInvitationsGet"];
    /**
     * Invites a person to the current account with the requested roles and properties.<br />
     * When you specify 'IsAccountAdmin', the user will automatically have access to all properties in all roles.<br />
     * The <i>user</i> will only be created or linked to the account, when the person accepts the invitation.<br>You must have this scope: 'identity:account-users.manage'.
     */
    post: operations["ApiAccountInvitationsPost"];
  };
  "/api/v1/account/invitations/{email}": {
    /** <br>You must have this scope: 'identity:account-users.manage'. */
    delete: operations["ApiAccountInvitationsByEmailDelete"];
  };
  "/api/v1/roles": {
    get: operations["ApiRolesGet"];
  };
  "/api/v1/users": {
    /** Returns a list of all users that have access to the current account.<br>You must have at least one of these scopes: 'identity:account-users.manage, identity:account-users.read'. */
    get: operations["ApiUsersGet"];
  };
  "/api/v1/users/{userId}": {
    /** Returns a user in the current account for a specific subjectId address.<br>You must have at least one of these scopes: 'identity:account-users.manage, identity:account-users.read'. */
    get: operations["ApiUsersByUserIdGet"];
    /**
     * Modify user in an account.
     * Allowed operations:
     * - Replace firstName and lastName
     * - Replace isAccountAdmin (setting it to true or false)
     * - Replace enabled (setting it to true or false)
     * - Replace properties<br>You must have this scope: 'identity:account-users.manage'.
     */
    patch: operations["ApiUsersByUserIdPatch"];
  };
}

export interface definitions {
  CreateInvitationModel: {
    /** Email address, used as the login */
    email: string;
    /** Properties that user has access to. If the user is invited as account admin, this will be ignored. */
    properties?: string[];
    /** If set to {true}, user has full access to all properties. Defaults to false. */
    isAccountAdmin?: boolean;
    /** Roles that user has access to. If the user is invited as account admin, this will be ignored. */
    roles?: (
      | "AccountAdmin"
      | "PropertyAdmin"
      | "Accountant"
      | "RevenueManager"
      | "ReservationManager"
      | "FrontDesk"
      | "FrontDeskSenior"
      | "Housekeeping"
    )[];
    /**
     * The role to be assigned to the user. If you specfiy this and 'Roles', the combination of both will be used.
     * If the user is invited as account admin, this will be ignored.
     */
    role?:
      | "AccountAdmin"
      | "PropertyAdmin"
      | "FinanceManager"
      | "RevenueManager"
      | "ReservationOffice"
      | "FrontOffice"
      | "Housekeeping";
  };
  InvitationListModel: {
    /** All invitations to the current account */
    invitations: definitions["InvitationModel"][];
  };
  InvitationModel: {
    /** Email address, used as the login */
    email: string;
    /** Properties that user has access to */
    properties?: string[];
    /** If set to {true}, user has full access to all properties. */
    isAccountAdmin: boolean;
    /** Role this user is invited to. If more than one, returns the first. */
    role?:
      | "AccountAdmin"
      | "PropertyAdmin"
      | "FinanceManager"
      | "RevenueManager"
      | "ReservationOffice"
      | "FrontOffice"
      | "Housekeeping";
    /** Roles that user has access to */
    roles?: (
      | "AccountAdmin"
      | "PropertyAdmin"
      | "Accountant"
      | "RevenueManager"
      | "ReservationManager"
      | "FrontDesk"
      | "FrontDeskSenior"
      | "Housekeeping"
    )[];
    /** Email of the user making the invitation */
    invitedBy: string;
    /** Date the invitation was made */
    created: string;
  };
  InvitedUserToAccountResponseModel: {
    /** Email of invited user */
    email: string;
  };
  MessageItemCollection: {
    messages?: string[];
  };
  Operation: {
    op?: string;
    value?: { [key: string]: unknown };
    path?: string;
  };
  PropertyRolesItemModel: {
    id: string;
    roles: (
      | "AccountAdmin"
      | "PropertyAdmin"
      | "Accountant"
      | "RevenueManager"
      | "ReservationManager"
      | "FrontDesk"
      | "FrontDeskSenior"
      | "Housekeeping"
    )[];
  };
  RoleListModel: {
    /** A list of all existing roles */
    roles: (
      | "AccountAdmin"
      | "PropertyAdmin"
      | "Accountant"
      | "RevenueManager"
      | "ReservationManager"
      | "FrontDesk"
      | "FrontDeskSenior"
      | "Housekeeping"
    )[];
  };
  UserItemModel: {
    /** Unique user identifier. */
    subjectId: string;
    /** First name */
    firstName: string;
    /** Last name */
    lastName: string;
    /** Email address, used as the login */
    email: string;
    /** Properties that user has access to */
    properties?: definitions["PropertyRolesItemModel"][];
    /** If set to {false}, the user is disabled for this account and cannot log in */
    enabled: boolean;
    /** If set to {true}, user has full access to all properties. */
    isAccountAdmin: boolean;
  };
  UserModel: {
    /** Unique user identifier. */
    subjectId: string;
    /** First name */
    firstName: string;
    /** Last name */
    lastName: string;
    /** Email address, used as the login */
    email: string;
    /** If set to {false}, the user is disabled for this account and cannot log in */
    enabled?: boolean;
    /** If set to {true}, user has full access to all properties. */
    isAccountAdmin: boolean;
    /** List of properties to which user has access. */
    properties?: string[];
    /** List of properties to which user has access. */
    propertyRoles?: definitions["PropertyRolesItemModel"][];
  };
  UsersListModel: {
    /** A collection of users that have access to the current account */
    users: definitions["UserItemModel"][];
  };
}

export interface operations {
  /** Returns a list of all invitations to the current account.<br>You must have at least one of these scopes: 'identity:account-users.manage, identity:account-users.read'. */
  ApiAccountInvitationsGet: {
    parameters: {
      query: {
        propertyId?: string;
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["InvitationListModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Invites a person to the current account with the requested roles and properties.<br />
   * When you specify 'IsAccountAdmin', the user will automatically have access to all properties in all roles.<br />
   * The <i>user</i> will only be created or linked to the account, when the person accepts the invitation.<br>You must have this scope: 'identity:account-users.manage'.
   */
  ApiAccountInvitationsPost: {
    parameters: {
      body: {
        body?: definitions["CreateInvitationModel"];
      };
    };
    responses: {
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Client Error */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** <br>You must have this scope: 'identity:account-users.manage'. */
  ApiAccountInvitationsByEmailDelete: {
    parameters: {
      path: {
        /** email of the invited person */
        email: string;
      };
    };
    responses: {
      /** Success */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  ApiRolesGet: {
    responses: {
      /** Success */
      200: {
        schema: definitions["RoleListModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns a list of all users that have access to the current account.<br>You must have at least one of these scopes: 'identity:account-users.manage, identity:account-users.read'. */
  ApiUsersGet: {
    parameters: {
      query: {
        /** List of property ids to filter users by */
        propertyIds?: string[];
        /** Filter users by email */
        email?: string;
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["UsersListModel"];
      };
      /** Success */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /** Returns a user in the current account for a specific subjectId address.<br>You must have at least one of these scopes: 'identity:account-users.manage, identity:account-users.read'. */
  ApiUsersByUserIdGet: {
    parameters: {
      path: {
        /** User's subjectId. */
        userId: string;
      };
    };
    responses: {
      /** Success. */
      200: {
        schema: definitions["UserModel"];
      };
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
  /**
   * Modify user in an account.
   * Allowed operations:
   * - Replace firstName and lastName
   * - Replace isAccountAdmin (setting it to true or false)
   * - Replace enabled (setting it to true or false)
   * - Replace properties<br>You must have this scope: 'identity:account-users.manage'.
   */
  ApiUsersByUserIdPatch: {
    parameters: {
      path: {
        /** User's subjectId */
        userId: string;
      };
      body: {
        body?: definitions["Operation"][];
      };
    };
    responses: {
      /** Success. */
      204: never;
      /** Bad request. */
      400: unknown;
      /** You are unauthorized. */
      401: unknown;
      /** Forbidden. */
      403: unknown;
      /** The Request-URI could not be found. */
      404: unknown;
      /** Unsupported media type. */
      415: unknown;
      /** Validation errors in the request body or query params. */
      422: {
        schema: definitions["MessageItemCollection"];
      };
      /** An unexpected error occurred. */
      500: unknown;
      /** The server is currently unavailable. Please try later. */
      503: unknown;
    };
  };
}

export interface external {}
